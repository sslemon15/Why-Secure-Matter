Linear part: No equation.
Convergent part:
ver_gt(NEW,CUR) = ok
Completing equations...
Completed equations:
ver_gt(NEW,CUR) = ok
Process 0 (that is, the initial process):
{1}!
{2}new k_i2r: key;
{3}new k_r2i: key;
{4}new ReqId: bitstring;
{5}new ProvId: bitstring;
{6}new SESSID: bitstring;
{7}new SRC_CTX: bitstring;
(
    {8}let sigf: bitstring = sign(hash(FWIMG),sk(KM_VENDOR)) in
    {9}out(cv, sigf)
) | (
    {10}let reqId: bitstring = ReqId in
    {11}let provId: bitstring = ProvId in
    {12}let k_i2r_1: key = k_i2r in
    {13}let k_r2i_1: key = k_r2i in
    {14}let sid_1: bitstring = SESSID in
    {15}let src_ctx: bitstring = SRC_CTX in
    {16}event CaseBegin(reqId,provId,NEW);
    {17}let q: bitstring = M_QI(VID,PID,CUR) in
    {18}new ctr_i2r1: bitstring;
    {19}let aadQ: bitstring = (MSGFLAGS,sid_1,SECFLAGS_UNICAST,ctr_i2r1,nil,nil) in
    {20}let nQ: bitstring = nonce(SECFLAGS_UNICAST,ctr_i2r1,src_ctx) in
    {21}event SendI2R(sid_1,ctr_i2r1,q);
    {22}event QuerySent(reqId,provId,VID,PID,CUR);
    {23}out(c, (aadQ,aead_enc(k_i2r_1,q,nQ,aadQ)));
    {24}in(c, (aadR: bitstring,ctR: bitstring));
    {25}let (mfR: bitstring,sidR: bitstring,sfR: bitstring,ctrR: bitstring,srcR: bitstring,dstR: bitstring) = aadR in
    {26}let nR: bitstring = nonce(sfR,ctrR,src_ctx) in
    {27}let r: bitstring = aead_dec(k_r2i_1,ctR,nR,aadR) in
    {28}let M_QIR(nsv: bitstring,utok: bitstring) = r in
    {29}event RecvR2I(sidR,ctrR,r);
    {30}if (ver_gt(nsv,CUR) = ok) then
    {31}event VersionAccepted(CUR,nsv);
    {32}in(c, (aadD: bitstring,ctD: bitstring));
    {33}let (mfD: bitstring,sidD: bitstring,sfD: bitstring,ctrD: bitstring,srcD: bitstring,dstD: bitstring) = aadD in
    {34}let nD: bitstring = nonce(sfD,ctrD,src_ctx) in
    {35}let dl: bitstring = aead_dec(k_r2i_1,ctD,nD,aadD) in
    {36}let M_DL(uri2: bitstring,fw: bitstring,digest: bitstring,sigf_1: bitstring) = dl in
    {37}event RecvR2I(sidD,ctrD,dl);
    {38}if (hash(fw) = digest) then
    {39}let m: bitstring = getmess(sigf_1) in
    {40}if (m = hash(fw)) then
    {41}if (checksign(sigf_1,pk(KM_VENDOR)) = ok) then
    {42}event DownloadDone(reqId,provId,uri2,fw);
    {43}let areq: bitstring = M_APPLY_REQ(utok) in
    {44}new ctr_i2r2: bitstring;
    {45}let aadA: bitstring = (MSGFLAGS,sid_1,SECFLAGS_UNICAST,ctr_i2r2,nil,nil) in
    {46}let nA: bitstring = nonce(SECFLAGS_UNICAST,ctr_i2r2,src_ctx) in
    {47}event SendI2R(sid_1,ctr_i2r2,areq);
    {48}event ApplyReqSent(sid_1,utok);
    {49}out(c, (aadA,aead_enc(k_i2r_1,areq,nA,aadA)));
    {50}in(c, (aadAR: bitstring,ctAR: bitstring));
    {51}let (mfAR: bitstring,sidAR: bitstring,sfAR: bitstring,ctrAR: bitstring,srcAR: bitstring,dstAR: bitstring) = aadAR in
    {52}let nAR: bitstring = nonce(sfAR,ctrAR,src_ctx) in
    {53}let rAR: bitstring = aead_dec(k_r2i_1,ctAR,nAR,aadAR) in
    {54}let M_APPLY_RESP(act: bitstring,dly: bitstring) = rAR in
    {55}event RecvR2I(sidAR,ctrAR,rAR);
    {56}event ApplyRespRcv(sidAR,utok,act);
    {57}if (act = ACT_PROCEED) then
    {58}event CaseEnd(reqId,provId,nsv);
    {59}event endR
) | (
    {60}let provId_1: bitstring = ProvId in
    {61}let k_i2r_2: key = k_i2r in
    {62}let k_r2i_2: key = k_r2i in
    {63}let sid_2: bitstring = SESSID in
    {64}let src_ctx_1: bitstring = SRC_CTX in
    {65}in(c, (aadQ_1: bitstring,ctQ: bitstring));
    {66}let (mfQ: bitstring,sidQ: bitstring,sfQ: bitstring,ctrQ: bitstring,srcQ: bitstring,dstQ: bitstring) = aadQ_1 in
    {67}let nQ_1: bitstring = nonce(sfQ,ctrQ,src_ctx_1) in
    {68}let msg: bitstring = aead_dec(k_i2r_2,ctQ,nQ_1,aadQ_1) in
    {69}let M_QI(vid: bitstring,pid: bitstring,csv: bitstring) = msg in
    {70}event RecvI2R(sidQ,ctrQ,msg);
    {71}in(cv, sigf_2: bitstring);
    {72}new utok_1: bitstring;
    {73}event TokenIssuedSID(sid_2,utok_1);
    {74}let resp: bitstring = M_QIR(NEW,utok_1) in
    {75}new ctr_r2i1: bitstring;
    {76}let aadR_1: bitstring = (MSGFLAGS,sid_2,SECFLAGS_UNICAST,ctr_r2i1,nil,nil) in
    {77}let nR_1: bitstring = nonce(SECFLAGS_UNICAST,ctr_r2i1,src_ctx_1) in
    {78}event SendR2I(sid_2,ctr_r2i1,resp);
    {79}event QueryAnsweredP(provId_1,VID,PID,NEW);
    {80}out(c, (aadR_1,aead_enc(k_r2i_2,resp,nR_1,aadR_1)));
    {81}event DownloadStart(provId_1,URI,FWIMG);
    {82}let digest_1: bitstring = hash(FWIMG) in
    {83}let dl_1: bitstring = M_DL(URI,FWIMG,digest_1,sigf_2) in
    {84}new ctr_r2i2: bitstring;
    {85}let aadD_1: bitstring = (MSGFLAGS,sid_2,SECFLAGS_UNICAST,ctr_r2i2,nil,nil) in
    {86}let nD_1: bitstring = nonce(SECFLAGS_UNICAST,ctr_r2i2,src_ctx_1) in
    {87}event SendR2I(sid_2,ctr_r2i2,dl_1);
    {88}out(c, (aadD_1,aead_enc(k_r2i_2,dl_1,nD_1,aadD_1)));
    {89}in(c, (aadA_1: bitstring,ctA: bitstring));
    {90}let (mfA: bitstring,sidA: bitstring,sfA: bitstring,ctrA: bitstring,srcA: bitstring,dstA: bitstring) = aadA_1 in
    {91}let nA_1: bitstring = nonce(sfA,ctrA,src_ctx_1) in
    {92}let areq_1: bitstring = aead_dec(k_i2r_2,ctA,nA_1,aadA_1) in
    {93}let M_APPLY_REQ(tk: bitstring) = areq_1 in
    {94}event RecvI2R(sidA,ctrA,areq_1);
    {95}event ApplyReqRcv(sidA,tk);
    {96}new delay: bitstring;
    {97}let aresp: bitstring = M_APPLY_RESP(ACT_PROCEED,delay) in
    {98}new ctr_r2i3: bitstring;
    {99}let aadAR_1: bitstring = (MSGFLAGS,sid_2,SECFLAGS_UNICAST,ctr_r2i3,nil,nil) in
    {100}let nAR_1: bitstring = nonce(SECFLAGS_UNICAST,ctr_r2i3,src_ctx_1) in
    {101}event SendR2I(sid_2,ctr_r2i3,aresp);
    {102}event ApplyRespSent(sid_2,tk,ACT_PROCEED);
    {103}out(c, (aadAR_1,aead_enc(k_r2i_2,aresp,nAR_1,aadAR_1)));
    {104}event endP
)

File "cis.pv", line 230, characters 59-61:
Warning: identifier sid rebound.
File "cis.pv", line 251, characters 7-9:
Warning: identifier sid rebound.
File "cis.pv", line 254, characters 7-9:
Warning: identifier sid rebound.
--  Process 1 (that is, process 0, with let moved downwards):
{1}!
{2}new k_i2r: key;
{3}new k_r2i: key;
{4}new ReqId: bitstring;
{5}new ProvId: bitstring;
{6}new SESSID: bitstring;
{7}new SRC_CTX: bitstring;
(
    {8}let sigf: bitstring = sign(hash(FWIMG),sk(KM_VENDOR)) in
    {9}out(cv, sigf)
) | (
    {11}let provId: bitstring = ProvId in
    {10}let reqId: bitstring = ReqId in
    {16}event CaseBegin(reqId,provId,NEW);
    {18}new ctr_i2r1: bitstring;
    {17}let q: bitstring = M_QI(VID,PID,CUR) in
    {14}let sid_1: bitstring = SESSID in
    {21}event SendI2R(sid_1,ctr_i2r1,q);
    {22}event QuerySent(reqId,provId,VID,PID,CUR);
    {15}let src_ctx: bitstring = SRC_CTX in
    {20}let nQ: bitstring = nonce(SECFLAGS_UNICAST,ctr_i2r1,src_ctx) in
    {19}let aadQ: bitstring = (MSGFLAGS,sid_1,SECFLAGS_UNICAST,ctr_i2r1,nil,nil) in
    {12}let k_i2r_1: key = k_i2r in
    {23}out(c, (aadQ,aead_enc(k_i2r_1,q,nQ,aadQ)));
    {24}in(c, (aadR: bitstring,ctR: bitstring));
    {25}let (mfR: bitstring,sidR: bitstring,sfR: bitstring,ctrR: bitstring,srcR: bitstring,dstR: bitstring) = aadR in
    {26}let nR: bitstring = nonce(sfR,ctrR,src_ctx) in
    {13}let k_r2i_1: key = k_r2i in
    {27}let r: bitstring = aead_dec(k_r2i_1,ctR,nR,aadR) in
    {28}let M_QIR(nsv: bitstring,utok: bitstring) = r in
    {29}event RecvR2I(sidR,ctrR,r);
    {30}if (ver_gt(nsv,CUR) = ok) then
    {31}event VersionAccepted(CUR,nsv);
    {32}in(c, (aadD: bitstring,ctD: bitstring));
    {33}let (mfD: bitstring,sidD: bitstring,sfD: bitstring,ctrD: bitstring,srcD: bitstring,dstD: bitstring) = aadD in
    {34}let nD: bitstring = nonce(sfD,ctrD,src_ctx) in
    {35}let dl: bitstring = aead_dec(k_r2i_1,ctD,nD,aadD) in
    {36}let M_DL(uri2: bitstring,fw: bitstring,digest: bitstring,sigf_1: bitstring) = dl in
    {37}event RecvR2I(sidD,ctrD,dl);
    {38}if (hash(fw) = digest) then
    {39}let m: bitstring = getmess(sigf_1) in
    {40}if (m = hash(fw)) then
    {41}if (checksign(sigf_1,pk(KM_VENDOR)) = ok) then
    {42}event DownloadDone(reqId,provId,uri2,fw);
    {44}new ctr_i2r2: bitstring;
    {43}let areq: bitstring = M_APPLY_REQ(utok) in
    {47}event SendI2R(sid_1,ctr_i2r2,areq);
    {48}event ApplyReqSent(sid_1,utok);
    {46}let nA: bitstring = nonce(SECFLAGS_UNICAST,ctr_i2r2,src_ctx) in
    {45}let aadA: bitstring = (MSGFLAGS,sid_1,SECFLAGS_UNICAST,ctr_i2r2,nil,nil) in
    {49}out(c, (aadA,aead_enc(k_i2r_1,areq,nA,aadA)));
    {50}in(c, (aadAR: bitstring,ctAR: bitstring));
    {51}let (mfAR: bitstring,sidAR: bitstring,sfAR: bitstring,ctrAR: bitstring,srcAR: bitstring,dstAR: bitstring) = aadAR in
    {52}let nAR: bitstring = nonce(sfAR,ctrAR,src_ctx) in
    {53}let rAR: bitstring = aead_dec(k_r2i_1,ctAR,nAR,aadAR) in
    {54}let M_APPLY_RESP(act: bitstring,dly: bitstring) = rAR in
    {55}event RecvR2I(sidAR,ctrAR,rAR);
    {56}event ApplyRespRcv(sidAR,utok,act);
    {57}if (act = ACT_PROCEED) then
    {58}event CaseEnd(reqId,provId,nsv);
    {59}event endR
) | (
    {65}in(c, (aadQ_1: bitstring,ctQ: bitstring));
    {66}let (mfQ: bitstring,sidQ: bitstring,sfQ: bitstring,ctrQ: bitstring,srcQ: bitstring,dstQ: bitstring) = aadQ_1 in
    {64}let src_ctx_1: bitstring = SRC_CTX in
    {67}let nQ_1: bitstring = nonce(sfQ,ctrQ,src_ctx_1) in
    {61}let k_i2r_2: key = k_i2r in
    {68}let msg: bitstring = aead_dec(k_i2r_2,ctQ,nQ_1,aadQ_1) in
    {69}let M_QI(vid: bitstring,pid: bitstring,csv: bitstring) = msg in
    {70}event RecvI2R(sidQ,ctrQ,msg);
    {71}in(cv, sigf_2: bitstring);
    {72}new utok_1: bitstring;
    {63}let sid_2: bitstring = SESSID in
    {73}event TokenIssuedSID(sid_2,utok_1);
    {75}new ctr_r2i1: bitstring;
    {74}let resp: bitstring = M_QIR(NEW,utok_1) in
    {78}event SendR2I(sid_2,ctr_r2i1,resp);
    {60}let provId_1: bitstring = ProvId in
    {79}event QueryAnsweredP(provId_1,VID,PID,NEW);
    {77}let nR_1: bitstring = nonce(SECFLAGS_UNICAST,ctr_r2i1,src_ctx_1) in
    {76}let aadR_1: bitstring = (MSGFLAGS,sid_2,SECFLAGS_UNICAST,ctr_r2i1,nil,nil) in
    {62}let k_r2i_2: key = k_r2i in
    {80}out(c, (aadR_1,aead_enc(k_r2i_2,resp,nR_1,aadR_1)));
    {81}event DownloadStart(provId_1,URI,FWIMG);
    {84}new ctr_r2i2: bitstring;
    {82}let digest_1: bitstring = hash(FWIMG) in
    {83}let dl_1: bitstring = M_DL(URI,FWIMG,digest_1,sigf_2) in
    {87}event SendR2I(sid_2,ctr_r2i2,dl_1);
    {86}let nD_1: bitstring = nonce(SECFLAGS_UNICAST,ctr_r2i2,src_ctx_1) in
    {85}let aadD_1: bitstring = (MSGFLAGS,sid_2,SECFLAGS_UNICAST,ctr_r2i2,nil,nil) in
    {88}out(c, (aadD_1,aead_enc(k_r2i_2,dl_1,nD_1,aadD_1)));
    {89}in(c, (aadA_1: bitstring,ctA: bitstring));
    {90}let (mfA: bitstring,sidA: bitstring,sfA: bitstring,ctrA: bitstring,srcA: bitstring,dstA: bitstring) = aadA_1 in
    {91}let nA_1: bitstring = nonce(sfA,ctrA,src_ctx_1) in
    {92}let areq_1: bitstring = aead_dec(k_i2r_2,ctA,nA_1,aadA_1) in
    {93}let M_APPLY_REQ(tk: bitstring) = areq_1 in
    {94}event RecvI2R(sidA,ctrA,areq_1);
    {95}event ApplyReqRcv(sidA,tk);
    {96}new delay: bitstring;
    {98}new ctr_r2i3: bitstring;
    {97}let aresp: bitstring = M_APPLY_RESP(ACT_PROCEED,delay) in
    {101}event SendR2I(sid_2,ctr_r2i3,aresp);
    {102}event ApplyRespSent(sid_2,tk,ACT_PROCEED);
    {100}let nAR_1: bitstring = nonce(SECFLAGS_UNICAST,ctr_r2i3,src_ctx_1) in
    {99}let aadAR_1: bitstring = (MSGFLAGS,sid_2,SECFLAGS_UNICAST,ctr_r2i3,nil,nil) in
    {103}out(c, (aadAR_1,aead_enc(k_r2i_2,aresp,nAR_1,aadAR_1)));
    {104}event endP
)

-- Query not attacker(FWIMG[]) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 164 rules (46 with conclusion selected). Queue: 4 rules.
Starting query not attacker(FWIMG[])
RESULT not attacker(FWIMG[]) is true.
-- Query event(DownloadDone(r_1,p,u,f)) ==> event(DownloadStart(p,u,f)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 164 rules (47 with conclusion selected). Queue: 3 rules.
Starting query event(DownloadDone(r_1,p,u,f)) ==> event(DownloadStart(p,u,f))
goal reachable: b-event(DownloadStart(ProvId_1,URI[],FWIMG[])) -> event(DownloadDone(ReqId_1,ProvId_1,URI[],FWIMG[]))
Abbreviations:
ReqId_1 = ReqId[!1 = @sid]
ProvId_1 = ProvId[!1 = @sid]
RESULT event(DownloadDone(r_1,p,u,f)) ==> event(DownloadStart(p,u,f)) is true.
-- Query inj-event(DownloadDone(r_1,p,u,f)) ==> inj-event(SendR2I(sid_3,ctr,M_DL(u,f,hash(f),sign(hash(f),sk(KM_VENDOR))))) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 165 rules (46 with conclusion selected). Queue: 6 rules.
Starting query inj-event(DownloadDone(r_1,p,u,f)) ==> inj-event(SendR2I(sid_3,ctr,M_DL(u,f,hash(f),sign(hash(f),sk(KM_VENDOR)))))
goal reachable: b-inj-event(SendR2I(SESSID_1,ctr_r2i2_1,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR)))),@occ87_1) && b-inj-event(SendR2I(SESSID_1,ctr_r2i1_1,M_QIR(NEW,utok_2)),@occ78_1) -> inj-event(DownloadDone(ReqId_1,ProvId_1,URI[],FWIMG[]),@occ42_1)
The 1st, 2nd hypotheses occur strictly before the conclusion.
Abbreviations:
ReqId_1 = ReqId[!1 = @sid]
ProvId_1 = ProvId[!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
SESSID_1 = SESSID[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ42_1 = @occ42[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
@occ87_1 = @occ87[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ78_1 = @occ78[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
RESULT inj-event(DownloadDone(r_1,p,u,f)) ==> inj-event(SendR2I(sid_3,ctr,M_DL(u,f,hash(f),sign(hash(f),sk(KM_VENDOR))))) is true.
-- Query event(DownloadStart(p,u,f)) ==> event(QueryAnsweredP(p,vid_1,pid_1,nsv_1)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 163 rules (47 with conclusion selected). Queue: 6 rules.
Starting query event(DownloadStart(p,u,f)) ==> event(QueryAnsweredP(p,vid_1,pid_1,nsv_1))
goal reachable: b-event(QueryAnsweredP(ProvId_1,VID[],PID[],NEW)) -> event(DownloadStart(ProvId_1,URI[],FWIMG[]))
Abbreviations:
ProvId_1 = ProvId[!1 = @sid]
RESULT event(DownloadStart(p,u,f)) ==> event(QueryAnsweredP(p,vid_1,pid_1,nsv_1)) is true.
-- Query event(RecvI2R(sid0,ctr0,m1)) && event(RecvI2R(sid0,ctr0,m2)) ==> m1 = m2 in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 164 rules (47 with conclusion selected). Queue: 4 rules.
Starting query event(RecvI2R(sid0,ctr0,m1)) && event(RecvI2R(sid0,ctr0,m2)) ==> m1 = m2
goal reachable: event(RecvI2R(SESSID_1,ctr_i2r2_1,M_APPLY_REQ(utok_2))) && event(RecvI2R(SESSID_1,ctr_i2r2_1,M_APPLY_REQ(utok_2)))
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_i2r2_1 = ctr_i2r2[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
goal reachable: event(RecvI2R(SESSID_1,ctr_i2r1_1,M_QI(VID[],PID[],CUR))) && event(RecvI2R(SESSID_1,ctr_i2r1_1,M_QI(VID[],PID[],CUR)))
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
RESULT event(RecvI2R(sid0,ctr0,m1)) && event(RecvI2R(sid0,ctr0,m2)) ==> m1 = m2 is true.
-- Query event(RecvR2I(sid1,ctr1,n1)) && event(RecvR2I(sid1,ctr1,n2)) ==> n1 = n2 in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 162 rules (45 with conclusion selected). Queue: 11 rules.
Starting query event(RecvR2I(sid1,ctr1,n1)) && event(RecvR2I(sid1,ctr1,n2)) ==> n1 = n2
goal reachable: event(RecvR2I(SESSID_1,ctr_r2i3_1,M_APPLY_RESP(ACT_PROCEED[],delay_1))) && event(RecvR2I(SESSID_1,ctr_r2i3_1,M_APPLY_RESP(ACT_PROCEED[],delay_1)))
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_i2r2_1 = ctr_i2r2[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
ctr_r2i3_1 = ctr_r2i3[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
delay_1 = delay[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
goal reachable: event(RecvR2I(SESSID_1,ctr_r2i2_1,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))))) && event(RecvR2I(SESSID_1,ctr_r2i2_1,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR)))))
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
goal reachable: event(RecvR2I(SESSID_1,ctr_r2i1_1,M_QIR(NEW,utok_2))) && event(RecvR2I(SESSID_1,ctr_r2i1_1,M_QIR(NEW,utok_2)))
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
RESULT event(RecvR2I(sid1,ctr1,n1)) && event(RecvR2I(sid1,ctr1,n2)) ==> n1 = n2 is true.
-- Query inj-event(RecvI2R(sid2,ctr2,m_1)) ==> inj-event(SendI2R(sid2,ctr2,m_1)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 168 rules (47 with conclusion selected). Queue: 5 rules.
Starting query inj-event(RecvI2R(sid2,ctr2,m_1)) ==> inj-event(SendI2R(sid2,ctr2,m_1))
goal reachable: b-inj-event(SendI2R(SESSID_1,ctr_i2r2_1,M_APPLY_REQ(utok_2)),@occ47_1) && b-event(@p_act(@occ32_1,((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))))) && b-event(@p_act(@occ24_1,((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))))) && b-inj-event(SendI2R(SESSID_1,ctr_i2r1_1,M_QI(VID[],PID[],CUR)),@occ21_1) -> inj-event(RecvI2R(SESSID_1,ctr_i2r2_1,M_APPLY_REQ(utok_2)),@occ94_1)
The 1st, 2nd, 3rd, 4th hypotheses occur strictly before the conclusion.
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_i2r2_1 = ctr_i2r2[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
@occ94_1 = @occ94[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ47_1 = @occ47[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
@occ32_1 = @occ32[!1 = @sid]
@occ24_1 = @occ24[!1 = @sid]
@occ21_1 = @occ21[!1 = @sid]
goal reachable: b-inj-event(SendI2R(SESSID_1,ctr_i2r1_1,M_QI(VID[],PID[],CUR)),@occ21_1) -> inj-event(RecvI2R(SESSID_1,ctr_i2r1_1,M_QI(VID[],PID[],CUR)),@occ70_1)
The hypothesis occurs strictly before the conclusion.
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
@occ70_1 = @occ70[ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ21_1 = @occ21[!1 = @sid]
RESULT inj-event(RecvI2R(sid2,ctr2,m_1)) ==> inj-event(SendI2R(sid2,ctr2,m_1)) is true.
-- Query inj-event(RecvR2I(sid3,ctr3,n)) ==> inj-event(SendR2I(sid3,ctr3,n)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 164 rules (45 with conclusion selected). Queue: 16 rules.
Starting query inj-event(RecvR2I(sid3,ctr3,n)) ==> inj-event(SendR2I(sid3,ctr3,n))
goal reachable: b-inj-event(SendR2I(SESSID_1,ctr_r2i3_1,M_APPLY_RESP(ACT_PROCEED[],delay_1)),@occ101_2) && b-event(@p_act(@occ89_2,((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))))) && b-inj-event(SendR2I(SESSID_1,ctr_r2i2_1,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR)))),@occ87_2) && b-inj-event(SendR2I(SESSID_1,ctr_r2i1_1,M_QIR(NEW,utok_2)),@occ78_2) -> inj-event(RecvR2I(SESSID_1,ctr_r2i3_1,M_APPLY_RESP(ACT_PROCEED[],delay_1)),@occ55_1)
The 1st, 2nd, 3rd, 4th hypotheses occur strictly before the conclusion.
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_i2r2_1 = ctr_i2r2[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
ctr_r2i3_1 = ctr_r2i3[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
delay_1 = delay[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ55_1 = @occ55[ctAR = aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil)),aadAR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
@occ101_2 = @occ101_1[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ89_2 = @occ89_1[!1 = @sid]
@occ87_2 = @occ87_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ78_2 = @occ78_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
goal reachable: b-inj-event(SendR2I(SESSID_1,ctr_r2i2_1,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR)))),@occ87_2) && b-inj-event(SendR2I(SESSID_1,ctr_r2i1_1,M_QIR(NEW,utok_2)),@occ78_2) -> inj-event(RecvR2I(SESSID_1,ctr_r2i2_1,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR)))),@occ37_1)
The 1st, 2nd hypotheses occur strictly before the conclusion.
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ37_1 = @occ37[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
@occ87_2 = @occ87_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ78_2 = @occ78_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
goal reachable: b-inj-event(SendR2I(SESSID_1,ctr_r2i1_1,M_QIR(NEW,utok_2)),@occ78_2) -> inj-event(RecvR2I(SESSID_1,ctr_r2i1_1,M_QIR(NEW,utok_2)),@occ29_1)
The hypothesis occurs strictly before the conclusion.
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
@occ29_1 = @occ29[ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
@occ78_2 = @occ78_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
RESULT inj-event(RecvR2I(sid3,ctr3,n)) ==> inj-event(SendR2I(sid3,ctr3,n)) is true.
-- Query inj-event(ApplyRespRcv(sid_3,tok,act_1)) ==> inj-event(ApplyReqSent(sid_3,tok)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 166 rules (44 with conclusion selected). Queue: 7 rules.
Starting query inj-event(ApplyRespRcv(sid_3,tok,act_1)) ==> inj-event(ApplyReqSent(sid_3,tok))
goal reachable: b-event(@p_act(@occ50_2,((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil))))) && b-inj-event(ApplyReqSent(SESSID_1,utok_2),@occ48_1) -> inj-event(ApplyRespRcv(SESSID_1,utok_2,ACT_PROCEED[]),@occ56_1)
The 1st, 2nd hypotheses occur strictly before the conclusion.
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_i2r2_1 = ctr_i2r2[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
delay_1 = delay[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i3_1 = ctr_r2i3[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
@occ56_1 = @occ56[ctAR = aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil)),aadAR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
@occ50_2 = @occ50_1[!1 = @sid]
@occ48_1 = @occ48[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
RESULT inj-event(ApplyRespRcv(sid_3,tok,act_1)) ==> inj-event(ApplyReqSent(sid_3,tok)) is true.
-- Query event(ApplyReqSent(sid_3,tok)) ==> event(TokenIssuedSID(sid_3,tok)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 163 rules (47 with conclusion selected). Queue: 4 rules.
Starting query event(ApplyReqSent(sid_3,tok)) ==> event(TokenIssuedSID(sid_3,tok))
goal reachable: b-event(TokenIssuedSID(SESSID_1,utok_2)) -> event(ApplyReqSent(SESSID_1,utok_2))
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
RESULT event(ApplyReqSent(sid_3,tok)) ==> event(TokenIssuedSID(sid_3,tok)) is true.
-- Query event(TokenIssuedSID(s1,tok)) && event(TokenIssuedSID(s2,tok)) ==> s1 = s2 in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 167 rules (47 with conclusion selected). Queue: 6 rules.
Starting query event(TokenIssuedSID(s1,tok)) && event(TokenIssuedSID(s2,tok)) ==> s1 = s2
goal reachable: event(TokenIssuedSID(SESSID_1,utok_2)) && event(TokenIssuedSID(SESSID_1,utok_2))
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
RESULT event(TokenIssuedSID(s1,tok)) && event(TokenIssuedSID(s2,tok)) ==> s1 = s2 is true.
-- Query not event(endP) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 163 rules (46 with conclusion selected). Queue: 6 rules.
Starting query not event(endP)
goal reachable: event(endP)

Derivation:
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_i2r2_1 = ctr_i2r2[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]

1. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))) may be sent to the attacker at output {23}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)))).

2. By 1, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)).
attacker(aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))).

3. Using the function nil the attacker may obtain nil.
attacker(nil).

4. By 1, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)).

5. By 4, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_i2r1_1.
attacker(ctr_i2r1_1).

6. The attacker initially knows SECFLAGS_UNICAST[].
attacker(SECFLAGS_UNICAST[]).

7. By 4, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
Using the function 2-proj-6-tuple the attacker may obtain SESSID_1.
attacker(SESSID_1).

8. The attacker initially knows MSGFLAGS[].
attacker(MSGFLAGS[]).

9. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 5, the attacker may know ctr_i2r1_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)).

10. By 9, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
By 2, the attacker may know aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)))).

11. The message sign(hash(FWIMG[]),sk(KM_VENDOR)) may be sent on channel cv[] at output {9}.
mess(cv[],sign(hash(FWIMG[]),sk(KM_VENDOR))).

12. The message sign(hash(FWIMG[]),sk(KM_VENDOR)) may be sent on channel cv[] at output {9}.
mess(cv[],sign(hash(FWIMG[]),sk(KM_VENDOR))).

13. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))) that the attacker may have by 10 may be received at input {65}.
The message sign(hash(FWIMG[]),sk(KM_VENDOR)) that may be sent on channel cv[] by 12 may be received at input {71}.
So the message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))) may be sent to the attacker at output {80}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)))).

14. By 13, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)).
attacker(aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))).

15. By 13, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)).

16. By 15, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_r2i1_1.
attacker(ctr_r2i1_1).

17. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 16, the attacker may know ctr_r2i1_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)).

18. By 17, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil).
By 14, the attacker may know aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)))).

19. The message sign(hash(FWIMG[]),sk(KM_VENDOR)) may be sent on channel cv[] at output {9}.
mess(cv[],sign(hash(FWIMG[]),sk(KM_VENDOR))).

20. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))) that the attacker may have by 10 may be received at input {65}.
The message sign(hash(FWIMG[]),sk(KM_VENDOR)) that may be sent on channel cv[] by 19 may be received at input {71}.
So the message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))) may be sent to the attacker at output {88}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)))).

21. By 20, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)).
attacker(aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))).

22. By 20, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)).

23. By 22, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_r2i2_1.
attacker(ctr_r2i2_1).

24. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 23, the attacker may know ctr_r2i2_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)).

25. By 24, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil).
By 21, the attacker may know aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)))).

26. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))) that the attacker may have by 18 may be received at input {24}.
The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))) that the attacker may have by 25 may be received at input {32}.
So the message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))) may be sent to the attacker at output {49}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)))).

27. By 26, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)).
attacker(aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))).

28. By 26, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)).

29. By 28, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_i2r2_1.
attacker(ctr_i2r2_1).

30. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 29, the attacker may know ctr_i2r2_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)).

31. By 30, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil).
By 27, the attacker may know aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)))).

32. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))) that the attacker may have by 10 may be received at input {65}.
The message sign(hash(FWIMG[]),sk(KM_VENDOR)) that may be sent on channel cv[] by 11 may be received at input {71}.
The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))) that the attacker may have by 31 may be received at input {89}.
So event endP may be executed at {104}.
event(endP).

33. By 32, event(endP).
The goal is reached, represented in the following fact:
event(endP).


A more detailed output of the traces is available with
  set traceDisplay = long.

new k_i2r: key creating k_i2r_4 at {2} in copy a

new k_r2i: key creating k_r2i_4 at {3} in copy a

new ReqId: bitstring creating ReqId_1 at {4} in copy a

new ProvId: bitstring creating ProvId_1 at {5} in copy a

new SESSID: bitstring creating SESSID_2 at {6} in copy a

new SRC_CTX: bitstring creating SRC_CTX_2 at {7} in copy a

event CaseBegin(ReqId_1,ProvId_1,NEW) at {16} in copy a

new ctr_i2r1: bitstring creating ctr_i2r1_2 at {18} in copy a

event SendI2R(SESSID_2,ctr_i2r1_2,M_QI(VID,PID,CUR)) at {21} in copy a

event QuerySent(ReqId_1,ProvId_1,VID,PID,CUR) at {22} in copy a

out(c, ((~M,~M_1,~M_2,~M_3,~M_4,~M_5),~M_6)) with ~M = MSGFLAGS, ~M_1 = SESSID_2, ~M_2 = SECFLAGS_UNICAST, ~M_3 = ctr_i2r1_2, ~M_4 = nil, ~M_5 = nil, ~M_6 = aead_enc(k_i2r_4,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_i2r1_2,nil,nil)) at {23} in copy a

new k_i2r: key creating k_i2r_5 at {2} in copy a_1

new k_r2i: key creating k_r2i_5 at {3} in copy a_1

new ReqId: bitstring creating ReqId_2 at {4} in copy a_1

new ProvId: bitstring creating ProvId_2 at {5} in copy a_1

new SESSID: bitstring creating SESSID_3 at {6} in copy a_1

new SRC_CTX: bitstring creating SRC_CTX_3 at {7} in copy a_1

event CaseBegin(ReqId_2,ProvId_2,NEW) at {16} in copy a_1

new ctr_i2r1: bitstring creating ctr_i2r1_3 at {18} in copy a_1

event SendI2R(SESSID_3,ctr_i2r1_3,M_QI(VID,PID,CUR)) at {21} in copy a_1

event QuerySent(ReqId_2,ProvId_2,VID,PID,CUR) at {22} in copy a_1

out(c, ((~M_7,~M_8,~M_9,~M_10,~M_11,~M_12),~M_13)) with ~M_7 = MSGFLAGS, ~M_8 = SESSID_3, ~M_9 = SECFLAGS_UNICAST, ~M_10 = ctr_i2r1_3, ~M_11 = nil, ~M_12 = nil, ~M_13 = aead_enc(k_i2r_5,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_3,SRC_CTX_3),(MSGFLAGS,SESSID_3,SECFLAGS_UNICAST,ctr_i2r1_3,nil,nil)) at {23} in copy a_1

new k_i2r: key creating k_i2r_6 at {2} in copy a_2

new k_r2i: key creating k_r2i_6 at {3} in copy a_2

new ReqId: bitstring creating ReqId_3 at {4} in copy a_2

new ProvId: bitstring creating ProvId_3 at {5} in copy a_2

new SESSID: bitstring creating SESSID_4 at {6} in copy a_2

new SRC_CTX: bitstring creating SRC_CTX_4 at {7} in copy a_2

event CaseBegin(ReqId_3,ProvId_3,NEW) at {16} in copy a_2

new ctr_i2r1: bitstring creating ctr_i2r1_4 at {18} in copy a_2

event SendI2R(SESSID_4,ctr_i2r1_4,M_QI(VID,PID,CUR)) at {21} in copy a_2

event QuerySent(ReqId_3,ProvId_3,VID,PID,CUR) at {22} in copy a_2

out(c, ((~M_14,~M_15,~M_16,~M_17,~M_18,~M_19),~M_20)) with ~M_14 = MSGFLAGS, ~M_15 = SESSID_4, ~M_16 = SECFLAGS_UNICAST, ~M_17 = ctr_i2r1_4, ~M_18 = nil, ~M_19 = nil, ~M_20 = aead_enc(k_i2r_6,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_4,SRC_CTX_4),(MSGFLAGS,SESSID_4,SECFLAGS_UNICAST,ctr_i2r1_4,nil,nil)) at {23} in copy a_2

new k_i2r: key creating k_i2r_7 at {2} in copy a_3

new k_r2i: key creating k_r2i_7 at {3} in copy a_3

new ReqId: bitstring creating ReqId_4 at {4} in copy a_3

new ProvId: bitstring creating ProvId_4 at {5} in copy a_3

new SESSID: bitstring creating SESSID_5 at {6} in copy a_3

new SRC_CTX: bitstring creating SRC_CTX_5 at {7} in copy a_3

event CaseBegin(ReqId_4,ProvId_4,NEW) at {16} in copy a_3

new ctr_i2r1: bitstring creating ctr_i2r1_5 at {18} in copy a_3

event SendI2R(SESSID_5,ctr_i2r1_5,M_QI(VID,PID,CUR)) at {21} in copy a_3

event QuerySent(ReqId_4,ProvId_4,VID,PID,CUR) at {22} in copy a_3

out(c, ((~M_21,~M_22,~M_23,~M_24,~M_25,~M_26),~M_27)) with ~M_21 = MSGFLAGS, ~M_22 = SESSID_5, ~M_23 = SECFLAGS_UNICAST, ~M_24 = ctr_i2r1_5, ~M_25 = nil, ~M_26 = nil, ~M_27 = aead_enc(k_i2r_7,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_5,SRC_CTX_5),(MSGFLAGS,SESSID_5,SECFLAGS_UNICAST,ctr_i2r1_5,nil,nil)) at {23} in copy a_3

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_3,nil,nil),~M_6)) with ~M_1 = SESSID_2, ~M_3 = ctr_i2r1_2, ~M_6 = aead_enc(k_i2r_4,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_i2r1_2,nil,nil)) at {65} in copy a

event RecvI2R(SESSID_2,ctr_i2r1_2,M_QI(VID,PID,CUR)) at {70} in copy a

out(cv, sign(hash(FWIMG),sk(KM_VENDOR))) at {9} in copy a_3 received at {71} in copy a

new utok_1: bitstring creating utok_3 at {72} in copy a

event TokenIssuedSID(SESSID_2,utok_3) at {73} in copy a

new ctr_r2i1: bitstring creating ctr_r2i1_2 at {75} in copy a

event SendR2I(SESSID_2,ctr_r2i1_2,M_QIR(NEW,utok_3)) at {78} in copy a

event QueryAnsweredP(ProvId_1,VID,PID,NEW) at {79} in copy a

out(c, ((~M_28,~M_29,~M_30,~M_31,~M_32,~M_33),~M_34)) with ~M_28 = MSGFLAGS, ~M_29 = SESSID_2, ~M_30 = SECFLAGS_UNICAST, ~M_31 = ctr_r2i1_2, ~M_32 = nil, ~M_33 = nil, ~M_34 = aead_enc(k_r2i_4,M_QIR(NEW,utok_3),nonce(SECFLAGS_UNICAST,ctr_r2i1_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i1_2,nil,nil)) at {80} in copy a

event DownloadStart(ProvId_1,URI,FWIMG) at {81} in copy a

new ctr_r2i2: bitstring creating ctr_r2i2_2 at {84} in copy a

event SendR2I(SESSID_2,ctr_r2i2_2,M_DL(URI,FWIMG,hash(FWIMG),sign(hash(FWIMG),sk(KM_VENDOR)))) at {87} in copy a

out(c, ((~M_35,~M_36,~M_37,~M_38,~M_39,~M_40),~M_41)) with ~M_35 = MSGFLAGS, ~M_36 = SESSID_2, ~M_37 = SECFLAGS_UNICAST, ~M_38 = ctr_r2i2_2, ~M_39 = nil, ~M_40 = nil, ~M_41 = aead_enc(k_r2i_4,M_DL(URI,FWIMG,hash(FWIMG),sign(hash(FWIMG),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST,ctr_r2i2_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i2_2,nil,nil)) at {88} in copy a

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_31,nil,nil),~M_34)) with ~M_1 = SESSID_2, ~M_31 = ctr_r2i1_2, ~M_34 = aead_enc(k_r2i_4,M_QIR(NEW,utok_3),nonce(SECFLAGS_UNICAST,ctr_r2i1_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i1_2,nil,nil)) at {24} in copy a

event RecvR2I(SESSID_2,ctr_r2i1_2,M_QIR(NEW,utok_3)) at {29} in copy a

event VersionAccepted(CUR,NEW) at {31} in copy a

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_38,nil,nil),~M_41)) with ~M_1 = SESSID_2, ~M_38 = ctr_r2i2_2, ~M_41 = aead_enc(k_r2i_4,M_DL(URI,FWIMG,hash(FWIMG),sign(hash(FWIMG),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST,ctr_r2i2_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i2_2,nil,nil)) at {32} in copy a

event RecvR2I(SESSID_2,ctr_r2i2_2,M_DL(URI,FWIMG,hash(FWIMG),sign(hash(FWIMG),sk(KM_VENDOR)))) at {37} in copy a

event DownloadDone(ReqId_1,ProvId_1,URI,FWIMG) at {42} in copy a

new ctr_i2r2: bitstring creating ctr_i2r2_2 at {44} in copy a

event SendI2R(SESSID_2,ctr_i2r2_2,M_APPLY_REQ(utok_3)) at {47} in copy a

event ApplyReqSent(SESSID_2,utok_3) at {48} in copy a

out(c, ((~M_42,~M_43,~M_44,~M_45,~M_46,~M_47),~M_48)) with ~M_42 = MSGFLAGS, ~M_43 = SESSID_2, ~M_44 = SECFLAGS_UNICAST, ~M_45 = ctr_i2r2_2, ~M_46 = nil, ~M_47 = nil, ~M_48 = aead_enc(k_i2r_4,M_APPLY_REQ(utok_3),nonce(SECFLAGS_UNICAST,ctr_i2r2_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_i2r2_2,nil,nil)) at {49} in copy a

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_45,nil,nil),~M_48)) with ~M_1 = SESSID_2, ~M_45 = ctr_i2r2_2, ~M_48 = aead_enc(k_i2r_4,M_APPLY_REQ(utok_3),nonce(SECFLAGS_UNICAST,ctr_i2r2_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_i2r2_2,nil,nil)) at {89} in copy a

event RecvI2R(SESSID_2,ctr_i2r2_2,M_APPLY_REQ(utok_3)) at {94} in copy a

event ApplyReqRcv(SESSID_2,utok_3) at {95} in copy a

new delay: bitstring creating delay_1 at {96} in copy a

new ctr_r2i3: bitstring creating ctr_r2i3_1 at {98} in copy a

event SendR2I(SESSID_2,ctr_r2i3_1,M_APPLY_RESP(ACT_PROCEED,delay_1)) at {101} in copy a

event ApplyRespSent(SESSID_2,utok_3,ACT_PROCEED) at {102} in copy a

out(c, ((~M_49,~M_50,~M_51,~M_52,~M_53,~M_54),~M_55)) with ~M_49 = MSGFLAGS, ~M_50 = SESSID_2, ~M_51 = SECFLAGS_UNICAST, ~M_52 = ctr_r2i3_1, ~M_53 = nil, ~M_54 = nil, ~M_55 = aead_enc(k_r2i_4,M_APPLY_RESP(ACT_PROCEED,delay_1),nonce(SECFLAGS_UNICAST,ctr_r2i3_1,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i3_1,nil,nil)) at {103} in copy a

event endP at {104} in copy a (goal)

The event endP is executed at {104} in copy a.
A trace has been found.
RESULT not event(endP) is false.
-- Query not event(endR) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 162 rules (46 with conclusion selected). Queue: 5 rules.
Starting query not event(endR)
goal reachable: event(endR)

Derivation:
Abbreviations:
SESSID_1 = SESSID[!1 = @sid]
k_i2r_3 = k_i2r[!1 = @sid]
ctr_i2r1_1 = ctr_i2r1[!1 = @sid]
SRC_CTX_1 = SRC_CTX[!1 = @sid]
utok_2 = utok_1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
k_r2i_3 = k_r2i[!1 = @sid]
ctr_r2i2_1 = ctr_r2i2[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_r2i1_1 = ctr_r2i1[sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
ctr_i2r2_1 = ctr_i2r2[ctD = aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)),aadD = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),ctR = aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)),aadR = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),!1 = @sid]
ctr_r2i3_1 = ctr_r2i3[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]
delay_1 = delay[ctA = aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)),aadA_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),sigf_2 = sign(hash(FWIMG[]),sk(KM_VENDOR)),ctQ = aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)),aadQ_1 = (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),!1 = @sid]

1. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))) may be sent to the attacker at output {23}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)))).

2. By 1, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)).
attacker(aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))).

3. Using the function nil the attacker may obtain nil.
attacker(nil).

4. By 1, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)).

5. By 4, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_i2r1_1.
attacker(ctr_i2r1_1).

6. The attacker initially knows SECFLAGS_UNICAST[].
attacker(SECFLAGS_UNICAST[]).

7. By 4, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
Using the function 2-proj-6-tuple the attacker may obtain SESSID_1.
attacker(SESSID_1).

8. The attacker initially knows MSGFLAGS[].
attacker(MSGFLAGS[]).

9. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 5, the attacker may know ctr_i2r1_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)).

10. By 9, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil).
By 2, the attacker may know aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil)))).

11. The message sign(hash(FWIMG[]),sk(KM_VENDOR)) may be sent on channel cv[] at output {9}.
mess(cv[],sign(hash(FWIMG[]),sk(KM_VENDOR))).

12. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))) that the attacker may have by 10 may be received at input {65}.
The message sign(hash(FWIMG[]),sk(KM_VENDOR)) that may be sent on channel cv[] by 11 may be received at input {71}.
So the message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))) may be sent to the attacker at output {80}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)))).

13. By 12, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)).
attacker(aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))).

14. By 12, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)).

15. By 14, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_r2i1_1.
attacker(ctr_r2i1_1).

16. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 15, the attacker may know ctr_r2i1_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)).

17. By 16, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil).
By 13, the attacker may know aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil)))).

18. The message sign(hash(FWIMG[]),sk(KM_VENDOR)) may be sent on channel cv[] at output {9}.
mess(cv[],sign(hash(FWIMG[]),sk(KM_VENDOR))).

19. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))) that the attacker may have by 10 may be received at input {65}.
The message sign(hash(FWIMG[]),sk(KM_VENDOR)) that may be sent on channel cv[] by 18 may be received at input {71}.
So the message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))) may be sent to the attacker at output {88}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)))).

20. By 19, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)).
attacker(aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))).

21. By 19, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)).

22. By 21, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_r2i2_1.
attacker(ctr_r2i2_1).

23. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 22, the attacker may know ctr_r2i2_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)).

24. By 23, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil).
By 20, the attacker may know aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil)))).

25. The message sign(hash(FWIMG[]),sk(KM_VENDOR)) may be sent on channel cv[] at output {9}.
mess(cv[],sign(hash(FWIMG[]),sk(KM_VENDOR))).

26. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))) that the attacker may have by 17 may be received at input {24}.
The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))) that the attacker may have by 24 may be received at input {32}.
So the message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))) may be sent to the attacker at output {49}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)))).

27. By 26, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)).
attacker(aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))).

28. By 26, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)).

29. By 28, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_i2r2_1.
attacker(ctr_i2r2_1).

30. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 29, the attacker may know ctr_i2r2_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)).

31. By 30, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil).
By 27, the attacker may know aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil)))).

32. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil),aead_enc(k_i2r_3,M_QI(VID[],PID[],CUR),nonce(SECFLAGS_UNICAST[],ctr_i2r1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r1_1,nil,nil))) that the attacker may have by 10 may be received at input {65}.
The message sign(hash(FWIMG[]),sk(KM_VENDOR)) that may be sent on channel cv[] by 25 may be received at input {71}.
The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil),aead_enc(k_i2r_3,M_APPLY_REQ(utok_2),nonce(SECFLAGS_UNICAST[],ctr_i2r2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_i2r2_1,nil,nil))) that the attacker may have by 31 may be received at input {89}.
So the message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil))) may be sent to the attacker at output {103}.
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil)))).

33. By 32, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil))).
Using the function 2-proj-2-tuple the attacker may obtain aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil)).
attacker(aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil))).

34. By 32, the attacker may know ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil))).
Using the function 1-proj-2-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil)).

35. By 34, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil).
Using the function 4-proj-6-tuple the attacker may obtain ctr_r2i3_1.
attacker(ctr_r2i3_1).

36. By 8, the attacker may know MSGFLAGS[].
By 7, the attacker may know SESSID_1.
By 6, the attacker may know SECFLAGS_UNICAST[].
By 35, the attacker may know ctr_r2i3_1.
By 3, the attacker may know nil.
By 3, the attacker may know nil.
Using the function 6-tuple the attacker may obtain (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil).
attacker((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil)).

37. By 36, the attacker may know (MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil).
By 33, the attacker may know aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil)).
Using the function 2-tuple the attacker may obtain ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil))).
attacker(((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil)))).

38. The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil),aead_enc(k_r2i_3,M_QIR(NEW,utok_2),nonce(SECFLAGS_UNICAST[],ctr_r2i1_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i1_1,nil,nil))) that the attacker may have by 17 may be received at input {24}.
The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil),aead_enc(k_r2i_3,M_DL(URI[],FWIMG[],hash(FWIMG[]),sign(hash(FWIMG[]),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST[],ctr_r2i2_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i2_1,nil,nil))) that the attacker may have by 24 may be received at input {32}.
The message ((MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil),aead_enc(k_r2i_3,M_APPLY_RESP(ACT_PROCEED[],delay_1),nonce(SECFLAGS_UNICAST[],ctr_r2i3_1,SRC_CTX_1),(MSGFLAGS[],SESSID_1,SECFLAGS_UNICAST[],ctr_r2i3_1,nil,nil))) that the attacker may have by 37 may be received at input {50}.
So event endR may be executed at {59}.
event(endR).

39. By 38, event(endR).
The goal is reached, represented in the following fact:
event(endR).


A more detailed output of the traces is available with
  set traceDisplay = long.

new k_i2r: key creating k_i2r_4 at {2} in copy a

new k_r2i: key creating k_r2i_4 at {3} in copy a

new ReqId: bitstring creating ReqId_1 at {4} in copy a

new ProvId: bitstring creating ProvId_1 at {5} in copy a

new SESSID: bitstring creating SESSID_2 at {6} in copy a

new SRC_CTX: bitstring creating SRC_CTX_2 at {7} in copy a

event CaseBegin(ReqId_1,ProvId_1,NEW) at {16} in copy a

new ctr_i2r1: bitstring creating ctr_i2r1_2 at {18} in copy a

event SendI2R(SESSID_2,ctr_i2r1_2,M_QI(VID,PID,CUR)) at {21} in copy a

event QuerySent(ReqId_1,ProvId_1,VID,PID,CUR) at {22} in copy a

out(c, ((~M,~M_1,~M_2,~M_3,~M_4,~M_5),~M_6)) with ~M = MSGFLAGS, ~M_1 = SESSID_2, ~M_2 = SECFLAGS_UNICAST, ~M_3 = ctr_i2r1_2, ~M_4 = nil, ~M_5 = nil, ~M_6 = aead_enc(k_i2r_4,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_i2r1_2,nil,nil)) at {23} in copy a

new k_i2r: key creating k_i2r_5 at {2} in copy a_1

new k_r2i: key creating k_r2i_5 at {3} in copy a_1

new ReqId: bitstring creating ReqId_2 at {4} in copy a_1

new ProvId: bitstring creating ProvId_2 at {5} in copy a_1

new SESSID: bitstring creating SESSID_3 at {6} in copy a_1

new SRC_CTX: bitstring creating SRC_CTX_3 at {7} in copy a_1

event CaseBegin(ReqId_2,ProvId_2,NEW) at {16} in copy a_1

new ctr_i2r1: bitstring creating ctr_i2r1_3 at {18} in copy a_1

event SendI2R(SESSID_3,ctr_i2r1_3,M_QI(VID,PID,CUR)) at {21} in copy a_1

event QuerySent(ReqId_2,ProvId_2,VID,PID,CUR) at {22} in copy a_1

out(c, ((~M_7,~M_8,~M_9,~M_10,~M_11,~M_12),~M_13)) with ~M_7 = MSGFLAGS, ~M_8 = SESSID_3, ~M_9 = SECFLAGS_UNICAST, ~M_10 = ctr_i2r1_3, ~M_11 = nil, ~M_12 = nil, ~M_13 = aead_enc(k_i2r_5,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_3,SRC_CTX_3),(MSGFLAGS,SESSID_3,SECFLAGS_UNICAST,ctr_i2r1_3,nil,nil)) at {23} in copy a_1

new k_i2r: key creating k_i2r_6 at {2} in copy a_2

new k_r2i: key creating k_r2i_6 at {3} in copy a_2

new ReqId: bitstring creating ReqId_3 at {4} in copy a_2

new ProvId: bitstring creating ProvId_3 at {5} in copy a_2

new SESSID: bitstring creating SESSID_4 at {6} in copy a_2

new SRC_CTX: bitstring creating SRC_CTX_4 at {7} in copy a_2

event CaseBegin(ReqId_3,ProvId_3,NEW) at {16} in copy a_2

new ctr_i2r1: bitstring creating ctr_i2r1_4 at {18} in copy a_2

event SendI2R(SESSID_4,ctr_i2r1_4,M_QI(VID,PID,CUR)) at {21} in copy a_2

event QuerySent(ReqId_3,ProvId_3,VID,PID,CUR) at {22} in copy a_2

out(c, ((~M_14,~M_15,~M_16,~M_17,~M_18,~M_19),~M_20)) with ~M_14 = MSGFLAGS, ~M_15 = SESSID_4, ~M_16 = SECFLAGS_UNICAST, ~M_17 = ctr_i2r1_4, ~M_18 = nil, ~M_19 = nil, ~M_20 = aead_enc(k_i2r_6,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_4,SRC_CTX_4),(MSGFLAGS,SESSID_4,SECFLAGS_UNICAST,ctr_i2r1_4,nil,nil)) at {23} in copy a_2

new k_i2r: key creating k_i2r_7 at {2} in copy a_3

new k_r2i: key creating k_r2i_7 at {3} in copy a_3

new ReqId: bitstring creating ReqId_4 at {4} in copy a_3

new ProvId: bitstring creating ProvId_4 at {5} in copy a_3

new SESSID: bitstring creating SESSID_5 at {6} in copy a_3

new SRC_CTX: bitstring creating SRC_CTX_5 at {7} in copy a_3

event CaseBegin(ReqId_4,ProvId_4,NEW) at {16} in copy a_3

new ctr_i2r1: bitstring creating ctr_i2r1_5 at {18} in copy a_3

event SendI2R(SESSID_5,ctr_i2r1_5,M_QI(VID,PID,CUR)) at {21} in copy a_3

event QuerySent(ReqId_4,ProvId_4,VID,PID,CUR) at {22} in copy a_3

out(c, ((~M_21,~M_22,~M_23,~M_24,~M_25,~M_26),~M_27)) with ~M_21 = MSGFLAGS, ~M_22 = SESSID_5, ~M_23 = SECFLAGS_UNICAST, ~M_24 = ctr_i2r1_5, ~M_25 = nil, ~M_26 = nil, ~M_27 = aead_enc(k_i2r_7,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_5,SRC_CTX_5),(MSGFLAGS,SESSID_5,SECFLAGS_UNICAST,ctr_i2r1_5,nil,nil)) at {23} in copy a_3

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_3,nil,nil),~M_6)) with ~M_1 = SESSID_2, ~M_3 = ctr_i2r1_2, ~M_6 = aead_enc(k_i2r_4,M_QI(VID,PID,CUR),nonce(SECFLAGS_UNICAST,ctr_i2r1_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_i2r1_2,nil,nil)) at {65} in copy a

event RecvI2R(SESSID_2,ctr_i2r1_2,M_QI(VID,PID,CUR)) at {70} in copy a

out(cv, sign(hash(FWIMG),sk(KM_VENDOR))) at {9} in copy a_3 received at {71} in copy a

new utok_1: bitstring creating utok_3 at {72} in copy a

event TokenIssuedSID(SESSID_2,utok_3) at {73} in copy a

new ctr_r2i1: bitstring creating ctr_r2i1_2 at {75} in copy a

event SendR2I(SESSID_2,ctr_r2i1_2,M_QIR(NEW,utok_3)) at {78} in copy a

event QueryAnsweredP(ProvId_1,VID,PID,NEW) at {79} in copy a

out(c, ((~M_28,~M_29,~M_30,~M_31,~M_32,~M_33),~M_34)) with ~M_28 = MSGFLAGS, ~M_29 = SESSID_2, ~M_30 = SECFLAGS_UNICAST, ~M_31 = ctr_r2i1_2, ~M_32 = nil, ~M_33 = nil, ~M_34 = aead_enc(k_r2i_4,M_QIR(NEW,utok_3),nonce(SECFLAGS_UNICAST,ctr_r2i1_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i1_2,nil,nil)) at {80} in copy a

event DownloadStart(ProvId_1,URI,FWIMG) at {81} in copy a

new ctr_r2i2: bitstring creating ctr_r2i2_2 at {84} in copy a

event SendR2I(SESSID_2,ctr_r2i2_2,M_DL(URI,FWIMG,hash(FWIMG),sign(hash(FWIMG),sk(KM_VENDOR)))) at {87} in copy a

out(c, ((~M_35,~M_36,~M_37,~M_38,~M_39,~M_40),~M_41)) with ~M_35 = MSGFLAGS, ~M_36 = SESSID_2, ~M_37 = SECFLAGS_UNICAST, ~M_38 = ctr_r2i2_2, ~M_39 = nil, ~M_40 = nil, ~M_41 = aead_enc(k_r2i_4,M_DL(URI,FWIMG,hash(FWIMG),sign(hash(FWIMG),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST,ctr_r2i2_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i2_2,nil,nil)) at {88} in copy a

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_31,nil,nil),~M_34)) with ~M_1 = SESSID_2, ~M_31 = ctr_r2i1_2, ~M_34 = aead_enc(k_r2i_4,M_QIR(NEW,utok_3),nonce(SECFLAGS_UNICAST,ctr_r2i1_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i1_2,nil,nil)) at {24} in copy a

event RecvR2I(SESSID_2,ctr_r2i1_2,M_QIR(NEW,utok_3)) at {29} in copy a

event VersionAccepted(CUR,NEW) at {31} in copy a

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_38,nil,nil),~M_41)) with ~M_1 = SESSID_2, ~M_38 = ctr_r2i2_2, ~M_41 = aead_enc(k_r2i_4,M_DL(URI,FWIMG,hash(FWIMG),sign(hash(FWIMG),sk(KM_VENDOR))),nonce(SECFLAGS_UNICAST,ctr_r2i2_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i2_2,nil,nil)) at {32} in copy a

event RecvR2I(SESSID_2,ctr_r2i2_2,M_DL(URI,FWIMG,hash(FWIMG),sign(hash(FWIMG),sk(KM_VENDOR)))) at {37} in copy a

event DownloadDone(ReqId_1,ProvId_1,URI,FWIMG) at {42} in copy a

new ctr_i2r2: bitstring creating ctr_i2r2_2 at {44} in copy a

event SendI2R(SESSID_2,ctr_i2r2_2,M_APPLY_REQ(utok_3)) at {47} in copy a

event ApplyReqSent(SESSID_2,utok_3) at {48} in copy a

out(c, ((~M_42,~M_43,~M_44,~M_45,~M_46,~M_47),~M_48)) with ~M_42 = MSGFLAGS, ~M_43 = SESSID_2, ~M_44 = SECFLAGS_UNICAST, ~M_45 = ctr_i2r2_2, ~M_46 = nil, ~M_47 = nil, ~M_48 = aead_enc(k_i2r_4,M_APPLY_REQ(utok_3),nonce(SECFLAGS_UNICAST,ctr_i2r2_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_i2r2_2,nil,nil)) at {49} in copy a

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_45,nil,nil),~M_48)) with ~M_1 = SESSID_2, ~M_45 = ctr_i2r2_2, ~M_48 = aead_enc(k_i2r_4,M_APPLY_REQ(utok_3),nonce(SECFLAGS_UNICAST,ctr_i2r2_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_i2r2_2,nil,nil)) at {89} in copy a

event RecvI2R(SESSID_2,ctr_i2r2_2,M_APPLY_REQ(utok_3)) at {94} in copy a

event ApplyReqRcv(SESSID_2,utok_3) at {95} in copy a

new delay: bitstring creating delay_2 at {96} in copy a

new ctr_r2i3: bitstring creating ctr_r2i3_2 at {98} in copy a

event SendR2I(SESSID_2,ctr_r2i3_2,M_APPLY_RESP(ACT_PROCEED,delay_2)) at {101} in copy a

event ApplyRespSent(SESSID_2,utok_3,ACT_PROCEED) at {102} in copy a

out(c, ((~M_49,~M_50,~M_51,~M_52,~M_53,~M_54),~M_55)) with ~M_49 = MSGFLAGS, ~M_50 = SESSID_2, ~M_51 = SECFLAGS_UNICAST, ~M_52 = ctr_r2i3_2, ~M_53 = nil, ~M_54 = nil, ~M_55 = aead_enc(k_r2i_4,M_APPLY_RESP(ACT_PROCEED,delay_2),nonce(SECFLAGS_UNICAST,ctr_r2i3_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i3_2,nil,nil)) at {103} in copy a

event endP at {104} in copy a

in(c, ((MSGFLAGS,~M_1,SECFLAGS_UNICAST,~M_52,nil,nil),~M_55)) with ~M_1 = SESSID_2, ~M_52 = ctr_r2i3_2, ~M_55 = aead_enc(k_r2i_4,M_APPLY_RESP(ACT_PROCEED,delay_2),nonce(SECFLAGS_UNICAST,ctr_r2i3_2,SRC_CTX_2),(MSGFLAGS,SESSID_2,SECFLAGS_UNICAST,ctr_r2i3_2,nil,nil)) at {50} in copy a

event RecvR2I(SESSID_2,ctr_r2i3_2,M_APPLY_RESP(ACT_PROCEED,delay_2)) at {55} in copy a

event ApplyRespRcv(SESSID_2,utok_3,ACT_PROCEED) at {56} in copy a

event CaseEnd(ReqId_1,ProvId_1,NEW) at {58} in copy a

event endR at {59} in copy a (goal)

The event endR is executed at {59} in copy a.
A trace has been found.
RESULT not event(endR) is false.

--------------------------------------------------------------
Verification summary:

Query not attacker(FWIMG[]) is true.

Query event(DownloadDone(r_1,p,u,f)) ==> event(DownloadStart(p,u,f)) is true.

Query inj-event(DownloadDone(r_1,p,u,f)) ==> inj-event(SendR2I(sid_3,ctr,M_DL(u,f,hash(f),sign(hash(f),sk(KM_VENDOR))))) is true.

Query event(DownloadStart(p,u,f)) ==> event(QueryAnsweredP(p,vid_1,pid_1,nsv_1)) is true.

Query event(RecvI2R(sid0,ctr0,m1)) && event(RecvI2R(sid0,ctr0,m2)) ==> m1 = m2 is true.

Query event(RecvR2I(sid1,ctr1,n1)) && event(RecvR2I(sid1,ctr1,n2)) ==> n1 = n2 is true.

Query inj-event(RecvI2R(sid2,ctr2,m_1)) ==> inj-event(SendI2R(sid2,ctr2,m_1)) is true.

Query inj-event(RecvR2I(sid3,ctr3,n)) ==> inj-event(SendR2I(sid3,ctr3,n)) is true.

Query inj-event(ApplyRespRcv(sid_3,tok,act_1)) ==> inj-event(ApplyReqSent(sid_3,tok)) is true.

Query event(ApplyReqSent(sid_3,tok)) ==> event(TokenIssuedSID(sid_3,tok)) is true.

Query event(TokenIssuedSID(s1,tok)) && event(TokenIssuedSID(s2,tok)) ==> s1 = s2 is true.

Query not event(endP) is false.

Query not event(endR) is false.

--------------------------------------------------------------

